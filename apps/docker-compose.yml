version: "3.9"
services:
  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=JxCkUVApSFS5USd2Ay03Vw
      - ALLOW_PLAINTEXT_LISTENER=yes
    command:
      - bash
      - -c
      - |
        /opt/bitnami/scripts/kafka/run.sh &

        echo "Waiting for Kafka to start..."
        sleep 10

        echo "Creating required topics..."
        topics="legacyAddDevice newDeviceNotification deleteDeviceNotification uiActivatedCommand uiCommand autoCommand acknowledgement newScenario"

        for topic in $$topics; do
          if [ -n "$$topic" ]; then
            echo "Creating topic: $$topic"
            kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic "$$topic" --partitions 1 --replication-factor 1
          fi
        done
        wait
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    restart: unless-stopped
    depends_on:
      keycloak-db:
        condition: service_started
    command:
      - start-dev             
      - --import-realm 
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    ports:
      - "8090:8080"       

  go-management-gateway:
    build: ./go-management-gateway
    depends_on:
      - device-management
    ports:
      - "8081:8081"
    environment:
      - API_KEY=my-secret-token
      - KEYCLOAK_ISSUER_URL=http://keycloak:8080/realms/iot-realm
      - KEYCLOAK_CLIENT_ID=management-gateway
      
  device-management:
    build: device-management/.
    depends_on:
      db:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:device-management-user@db:5432/dockert
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - OIDC_ISSUER=http://keycloak:8080/realms/iot-realm
      - OIDC_AUDIENCE=device-management
    ports:
      - 8000:80

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=device-management-user
      - POSTGRES_DB=dockert

  legacy-monolith:
    build: ./legacy-monolith-temperature/temperature-api/
    depends_on: 
      kafka:
        condition: service_healthy
      legacy-monolith-db:
        condition: service_started
    environment:
    - ASPNETCORE_URLS=http://0.0.0.0:8082
    - Kafka__BootstrapServers=kafka:9092
    ports:
      - "8082:8082"
  
  legacy-monolith-db:
    image: postgres:15-alpine
    volumes:
      - postgres_data_old:/var/lib/postgresql/data/
      - ./database-init/init-old-monolith-db.sql:/docker-entrypoint-initdb.d/init-old-monolith-db.sql:ro
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=smarthome
    ports:
      - 5430:5432

  go-bridge-for-legacy:
    build: ./go-bridge-for-legacy
    depends_on:
      - kafka
    ports:
      - "8085:8085"
    environment:
      - KAFKA_BROKER=kafka:9092
      - API_KEY=my-secret-token

  node-action-initializer:
    build: ./node-action-initiation
    depends_on:
      device-management:
        condition: service_started
      kafka:
        condition: service_healthy
      eventstore:
        condition: service_started
    environment:
      - KAFKA_BROKER=kafka:9092
      - ESDB_ENDPOINT=eventstore:2113
      - ESDB_TLS=false
    ports:
      - "3001:3001"

  node-notification:
    build: ./node-alerting-notification
    depends_on:
      device-management:
        condition: service_started
      kafka:
        condition: service_healthy
      eventstore:
        condition: service_started
    environment:
      - KAFKA_BROKER=kafka:9092
      - ESDB_ENDPOINT=eventstore:2113
      - ESDB_TLS=false
    ports:
      - "3005:3005"
  
  go-native-devices-gateway:
    build: ./go-native-devices-gateway
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKER=kafka:9092
      - API_KEY=my-secret-token

  minio-streaming:
    image: minio/minio
    ports:
      - "9001:9001"
      - "9002:9002"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  go-video-streaming-gateway:
    build: ./go-video-streaming-gateway
    ports:
      - "8079:8079"
    depends_on:
      minio-streaming:
        condition: service_healthy
    environment:
      MINIO_ENDPOINT: minio:9002
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin

  net-device-metrics:
    build: ./net-device-metrics
    depends_on:
      - kafka
    ports:
      - "9000:9000"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"

  loki:
    image: grafana/loki:2.9.1
    ports:
      - "3111:3111"
    command: -config.file=/etc/loki/local-config.yml
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yml
      - loki-data:/loki

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana

  py-supporting:
    build: ./py-supporting
    ports:
      - "7999:7999"
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongo:27017
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  eventstore:
    image: eventstore/eventstore:24.2.0-bookworm-slim
    container_name: eventstore
    environment:
      EVENTSTORE_INSECURE: "true"
      EVENTSTORE_RUN_PROJECTIONS: All
      EVENTSTORE_START_STANDARD_PROJECTIONS: "true"
      EVENTSTORE_CLUSTER_SIZE: 1
    ports:
      - "2113:2113"
      - "1113:1113"
    volumes:
      - esdata:/var/lib/eventstore

volumes:
  postgres_data:
  grafana-storage:
  esdata:
  minio-data:
  mongo_data:
  loki-data:
  prometheus-data:
  postgres_data_old:
  keycloak_db_data: